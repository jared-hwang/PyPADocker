// Copyright (C) 2011-2013 by the BEM++ Authors
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

#ifndef bempp_assembled_potential_operator_hpp
#define bempp_assembled_potential_operator_hpp

#include "../common/common.hpp"

#include "../common/eigen_support.hpp"
#include "../common/scalar_traits.hpp"
#include "../common/shared_ptr.hpp"

namespace Bempp {

template <typename ValueType> class DiscreteBoundaryOperator;
template <typename BasisFunctionType> class Space;

/** \ingroup potential_operators
 *  \brief Assembled potential operator.
 *
 *  This class stores a DiscreteBoundaryOperator object representing the matrix
 *  containing the values of the potentials generated by applying a specific
 *  potential operator, at a certain set of points \f$\{\boldsymbol
 *  x_i\}_{i=1}^m\f$, to the charge distributions given by the individual basis
 *  functions \f$\{\phi_i\}_{i=1}^m\f$ of a function space. An
 *  AssembledPotentialOperator object can be used to rapidly evaluate the
 *  potential generated at the points \f$\{\boldsymbol x_i\}_{i=1}^m\f$ by any
 *  GridFunction expanded in that function space.
 */
template <typename BasisFunctionType, typename ResultType>
class AssembledPotentialOperator {
public:
  /** \brief Type used to represent point coordinates. */
  typedef typename ScalarTraits<ResultType>::RealType CoordinateType;

  // name abuse: the discrete operator plays the part of a discrete *potential*
  // operator, not a discrete boundary operator...
  /** \brief Constructor.
   *
   *  \param[in] space_
   *     A function space.
   *  \param[in] evaluationPoints_
   *     A 2D array whose (i, j)th element contains the ith coordinate of jth
   *     evaluation point. The number of rows (i.e. the number of coordinates)
   *     must be equal to <tt>space_->grid()->dimWorld()</tt>.
   *  \param[in] op_
   *     A DiscreteBoundaryOperator object representing the matrix whose (i *
   *     c, j)th element contains the value of the cth component of the
   *     potential generated at the ith point by the charge distribution equal
   *     to the jth basis function of space \p space_.
   *  \param[in] componentCount_
   *     The number of components of the potential (e.g. 1 if the potential is
   *     scalar-valued, 3 if it is vector-valued).
   */
  AssembledPotentialOperator(
      const shared_ptr<const Space<BasisFunctionType>> &space_,
      const shared_ptr<const Matrix<CoordinateType>> &evaluationPoints_,
      const shared_ptr<const DiscreteBoundaryOperator<ResultType>> &op_,
      int componentCount_);

  /** brief Return the space used in the construction of this operator.
   *
   *  See the documentation of the constructor for a full desciption. */
  shared_ptr<const Space<BasisFunctionType>> space() const;

  /** brief Return the list of points at which the potential is evaluated.
   *
   *  The (i, j)th element of the returned array contains the ith coordinate
   *  of jth evaluation point.  */
  shared_ptr<const Matrix<CoordinateType>> evaluationPoints() const;

  /** brief Return the discrete operator object defining the assembled operator.
   *
   *  See the documentation of the constructor for a full desciption. */
  shared_ptr<const DiscreteBoundaryOperator<ResultType>>
  discreteOperator() const;

  /** \brief Return the number of components of the potential. */
  int componentCount() const;

  /** \brief Apply the operator to a grid function.
   *
   *  \param[in] coefficients Expansion coefficients of the function to be
   *applied.
   *space().
   *
   *  \returns A matrix whose (\e i, \e j)th element contains the value of the
   *  <em>i</em>th component of the potential generated by the charge
   *  distribution \p argument at the <em>j</em>th point from the array
   *  returned by the function evaluationPoints(). */
  Matrix<ResultType> apply(const Vector<ResultType> &coefficienets) const;

private:
  /** \cond PRIVATE */
  shared_ptr<const Space<BasisFunctionType>> m_space;
  shared_ptr<const Matrix<CoordinateType>> m_evaluationPoints;
  shared_ptr<const DiscreteBoundaryOperator<ResultType>> m_op;
  int m_componentCount;
  /** \endcond */
};

} // namespace Bempp

#endif
